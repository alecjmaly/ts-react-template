
worker_processes 2;

events {
  worker_connections 1024;
}

http {
  upstream backend {
      # These are references to our backend containers, facilitated by
      # Compose, as defined in docker-compose.yml   
      server api_server:3000;
  }
  server {
    listen 8080;
    server_name localhost;
    location / {
      proxy_pass http://backend;
      proxy_set_header Host $host;
    }
  }
}

# worker_processes 2;
# worker_rlimit_nofile 20000;

# events {
#     worker_connections 4096;
# }

# stream {
#     upstream api_server1 {
#         least_conn;
#         server IP_NODE_1:443 max_fails=3 fail_timeout=5s;
#         server IP_NODE_2:443 max_fails=3 fail_timeout=5s;
#         server IP_NODE_3:443 max_fails=3 fail_timeout=5s;
#     }
#     server {
#         listen 443;
#         # https://www.exploit.cz/how-to-solve-kubernetes-ingress-nginx-real-ip/
#         #proxy_protocol        on; #uncomment if you got 127.0.0.1 remote ip issue
#         proxy_pass api_server1;
#     }

#     upstream api_server1_http {
#         least_conn;
#         server IP_NODE_1:3000 max_fails=3 fail_timeout=5s;
#         server IP_NODE_2:3000 max_fails=3 fail_timeout=5s;
#         server IP_NODE_3:3000 max_fails=3 fail_timeout=5s;
#     }
#     server {
#         listen 80;
#         # https://www.exploit.cz/how-to-solve-kubernetes-ingress-nginx-real-ip/
#         #proxy_protocol        on; #uncomment if you got 127.0.0.1 remote ip issue
#         proxy_pass api_server1_http;
#     }
# }
